<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Toycube</title><description>Blog</description><link>https://fuwari.vercel.app/</link><language>en</language><item><title>Adding Astro Components to MDX</title><link>https://fuwari.vercel.app/posts/tasks/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/tasks/</guid><pubDate>Sat, 24 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;import TaskBoard from &apos;../../components/todo/TaskBoard.astro&apos;&lt;/p&gt;
&lt;p&gt;Last edited: 2024-08-26&lt;/p&gt;
&lt;p&gt;In this blog post, we&apos;ll add an Astro component to an MDX blog. Specifically, we&apos;ll integrate a task board component that manages tasks with create, read, update and delete operations (CRUD).
In this guide, the backend is running on a express node.js server with mySQL for data and persistence.&lt;/p&gt;
&lt;p&gt;To see this in action, here’s how you can embed this task board in your MDX blog:&lt;/p&gt;
&lt;p&gt;&amp;lt;TaskBoard client:load /&amp;gt;
First, create a &lt;code&gt;TaskBoard.astro&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
import TaskList from &quot;./TaskList.svelte&quot;;

---

&amp;lt;div&amp;gt;
  &amp;lt;h1&amp;gt;Task Board&amp;lt;/h1&amp;gt;
  &amp;lt;TaskList client:load /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Role of &lt;code&gt;.astro&lt;/code&gt; Files&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.astro&lt;/code&gt; files are part of the Astro framework, which allows you to create static websites with modern web technologies. Astro components are used to build and compose static and interactive elements on your site.&lt;/p&gt;
&lt;p&gt;In the context of this blog post, the &lt;code&gt;.astro&lt;/code&gt; file is essential because it serves as the container for your interactive task board component. Here’s how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Definition&lt;/strong&gt;: The &lt;code&gt;TaskBoard.astro&lt;/code&gt; file defines the structure and behavior of your task board. This includes importing Svelte components and specifying how they should be rendered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static and Dynamic Content&lt;/strong&gt;: &lt;code&gt;.astro&lt;/code&gt; files allow you to mix static HTML with dynamic components. In this case, it’s used to render a task board that incorporates the Svelte &lt;code&gt;TaskList&lt;/code&gt; component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Client-Side Rendering&lt;/strong&gt;: By using &lt;code&gt;client:load&lt;/code&gt;, you ensure that the component is rendered on the client side after the initial page load. This is crucial for components that require user interaction, like our task board.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we need to create a &lt;code&gt;TaskList.svelte&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script lang=&quot;ts&quot;&amp;gt;
  import { onMount } from &apos;svelte&apos;;
  import { faPlus, faTrash } from &apos;@fortawesome/free-solid-svg-icons&apos;;
  import Fa from &apos;svelte-fa&apos;;
  // Define the type for tasks
  type Task = { id: number; text: string; isCompleted: boolean };

  // State variables
  let tasks: Task[] = [];
  let newTask: string = &apos;&apos;;
  let error: string | null = null;
  const MAX_TASK_LENGTH = 100; // Set the max character length for tasks

  // Fetch tasks from the backend
  const fetchTasks = async () =&amp;gt; {
    try {
      const response = await fetch(&apos;http://toycube.com.au/api/tasks&apos;);
      if (!response.ok) throw new Error(&apos;Failed to fetch tasks&apos;);
      tasks = await response.json();
    } catch (err) {
      showAlert(err.message);
    }
  };

  // Add a new task
  const addTask = async () =&amp;gt; {
    if (newTask.trim() === &apos;&apos;) {
      showAlert(&apos;Task cannot be empty.&apos;);
      return;
    }
    if (newTask.length &amp;gt; MAX_TASK_LENGTH) {
      showAlert(
        `Task exceeds maximum length of ${MAX_TASK_LENGTH} characters.`
      );
      return;
    }
    try {
      const response = await fetch(&apos;http://toycube.com.au/api/tasks&apos;, {
        method: &apos;POST&apos;,
        headers: {
          &apos;Content-Type&apos;: &apos;application/json&apos;,
        },
        body: JSON.stringify({ text: newTask }),
      });
      if (!response.ok) throw new Error(&apos;Failed to add task&apos;);
      const task = await response.json();
      tasks = [...tasks, task];
      newTask = &apos;&apos;;
    } catch (err) {
      showAlert(err.message);
    }
  };

  // Update an existing task
  const updateTask = async (id: number, text: string, isCompleted: boolean) =&amp;gt; {
    try {
      const response = await fetch(`http://toycube.com.au/api/tasks/${id}`, {
        method: &apos;PUT&apos;,
        headers: {
          &apos;Content-Type&apos;: &apos;application/json&apos;,
        },
        body: JSON.stringify({ text, isCompleted }),
      });
      if (!response.ok) throw new Error(&apos;Failed to update task&apos;);
      tasks = tasks.map((task) =&amp;gt;
        task.id === id ? { ...task, text, isCompleted } : task
      );
    } catch (err) {
      showAlert(err.message);
    }
  };

  // Delete a task
  const deleteTask = async (id: number) =&amp;gt; {
    try {
      const response = await fetch(`http://toycube.com.au/api/tasks/${id}`, {
        method: &apos;DELETE&apos;,
      });
      if (!response.ok) throw new Error(&apos;Failed to delete task&apos;);
      tasks = tasks.filter((task) =&amp;gt; task.id !== id);
    } catch (err) {
      showAlert(err.message);
    }
  };

  // Show an alert message
  const showAlert = (message: string) =&amp;gt; {
    error = message;
    setTimeout(() =&amp;gt; {
      error = null;
    }, 5000); // Clear error message after 5 seconds
  };

  // Fetch tasks on component mount
  onMount(fetchTasks);
&amp;lt;/script&amp;gt;

&amp;lt;div class=&quot;flex items-center mb-4&quot;&amp;gt;
  &amp;lt;input
    type=&quot;text&quot;
    bind:value={newTask}
    placeholder=&quot;New task&quot;
    class=&quot;flex-grow p-2 border rounded mr-2&quot;
  /&amp;gt;
  &amp;lt;button
    on:click={addTask}
    class=&quot;bg-blue-500 text-white p-2 rounded hover:bg-blue-600&quot;
  &amp;gt;
    &amp;lt;Fa icon={faPlus} /&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

{#if error}
  &amp;lt;div class=&quot;text-red-500 bg-red-100 border border-red-400 p-2 rounded mb-4&quot;&amp;gt;
    {error}
  &amp;lt;/div&amp;gt;
{/if}

&amp;lt;ol class=&quot;list-decimal pl-6&quot;&amp;gt;
  {#each tasks as task, index}
    &amp;lt;li&amp;gt;
      &amp;lt;input
        type=&quot;checkbox&quot;
        checked={task.isCompleted}
        on:change={() =&amp;gt; updateTask(task.id, task.text, !task.isCompleted)}
        class=&quot;mr-3 w-6 h-6&quot;
      /&amp;gt;
      &amp;lt;input
        type=&quot;text&quot;
        bind:value={task.text}
        on:change={(e) =&amp;gt; updateTask(task.id, e.target.value, task.isCompleted)}
        class=&quot;flex-grow p-2 border rounded mr-3 w-96 shadow&quot;
      /&amp;gt;
      &amp;lt;button
        on:click={() =&amp;gt; deleteTask(task.id)}
        class=&quot;bg-red-500 text-white p-2 rounded hover:bg-red-600&quot;
      &amp;gt;
        &amp;lt;Fa icon={faTrash} /&amp;gt;
      &amp;lt;/button&amp;gt;
    &amp;lt;/li&amp;gt;
  {/each}
&amp;lt;/ol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Role of &lt;code&gt;.svelte&lt;/code&gt; Files&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.svelte&lt;/code&gt; files are part of the Svelte framework, which is known for its efficient compilation to highly optimised JavaScript. Svelte components offer a reactive and component-based approach to building user interfaces.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;TaskList.svelte&lt;/code&gt; file, you define the core functionality of the task board:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Task Management&lt;/strong&gt;: This file handles the creation, updating, and deletion of tasks. It manages state and interacts with the backend to fetch and update tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reactive Components&lt;/strong&gt;: Svelte’s reactive features make it easy to handle user interactions, such as adding a new task or marking a task as completed. The component automatically updates the view based on changes in state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integration&lt;/strong&gt;: The &lt;code&gt;TaskList.svelte&lt;/code&gt; file is imported into the &lt;code&gt;TaskBoard.astro&lt;/code&gt; file. This integration allows you to use Svelte’s powerful reactive features within the Astro framework, combining the best of both worlds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;How They Work Together&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Astro Component&lt;/strong&gt;: The &lt;code&gt;TaskBoard.astro&lt;/code&gt; file acts as a bridge, integrating the Svelte component into the static content of your blog. It imports the Svelte &lt;code&gt;TaskList&lt;/code&gt; component and ensures it is rendered correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interactive Functionality&lt;/strong&gt;: The Svelte component provides the interactive features, such as adding and managing tasks. The &lt;code&gt;.astro&lt;/code&gt; file makes sure this component is loaded and displayed on the client side.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Embedding in MDX&lt;/strong&gt;: By importing the &lt;code&gt;TaskBoard&lt;/code&gt; component into your MDX file and using it with &lt;code&gt;&amp;lt;TaskBoard client:load /&amp;gt;&lt;/code&gt;, you embed interactive functionality into your static blog content. This enhances the user experience by adding dynamic elements directly within your posts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Import the TaskBoard component from your Astro project, and embed the TaskBoard component into your blog content:
This setup allows you to display the task board within your MDX content, making it interactive and functional.&lt;/p&gt;
&lt;p&gt;By following these steps, you can incorporate interactive Astro components into your MDX blog posts.
tasks.mdx&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Adding Astro Components to MDX
published: 2024-08-24
description: &apos;&apos;
image: &apos;&apos;
tags: []
category: &apos;Recipes&apos;
draft: false 
---
import TaskBoard from &apos;../../components/todo/TaskBoard.astro&apos;

&amp;lt;TaskBoard client:load /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;:::tip&lt;/p&gt;
&lt;h3&gt;Future Enhancements&lt;/h3&gt;
&lt;p&gt;And finally, here are a few potential improvements to make it even better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rearranging Tasks&lt;/strong&gt;: Enable drag-and-drop reordering for easier prioritisation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adding Creation Dates&lt;/strong&gt;: Show when tasks were created to track progress over time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Filtering and Sorting&lt;/strong&gt;: Add options to sort and filter tasks by due date or priority.
:::&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>Crochet Plants</title><link>https://fuwari.vercel.app/posts/crochet/crochet-plants/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/crochet/crochet-plants/</guid><pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This month&apos;s crochet creations. :D
&lt;img src=&quot;trio-cactus.jpg&quot; alt=&quot;Barrel cacti in cobalt-coloured yarn.&quot; /&gt;
&lt;img src=&quot;cactus.jpg&quot; alt=&quot;Spiral barrel cactus.&quot; /&gt;
&lt;img src=&quot;corn.jpg&quot; alt=&quot;Comfy-looking corn with leaf garments.&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>Hydroponic Journey</title><link>https://fuwari.vercel.app/posts/hydroponics/hydroponic-journey/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/hydroponics/hydroponic-journey/</guid><pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Starting a hydroponic garden at the beginning of this year was a mix of excitement and overwhelm. The journey involved figuring out the right growing medium, nutrients, plant varieties, water pH, EC levels, temperature control, and setting up the right system to support all these elements.&lt;/p&gt;
&lt;h2&gt;May 14: The Beginnings&lt;/h2&gt;
&lt;p&gt;It all started with two basic &lt;a href=&quot;https://www.bunnings.com.au/hydro-planter_p0207206?srsltid=AfmBOoofyeFJ0N1TsaARcMLbb4OhAFZRgRXwBnPbs-1WU_66uV9-gJBV&quot;&gt;Hydro planters&lt;/a&gt; from Bunnings, a thoughtful gift from my family. I aimed to start with a small hydroponic garden, roughly the size of a goldfish bowl. Unfortunately, my initial choice of fish pebbles as a growing medium didn&apos;t work out well. The pebbles led to dirty water and frequent changes of the nutrient solution. A pump seemed like a good fix, but it also meant needing a larger container to accommodate all the plants.&lt;/p&gt;
&lt;h2&gt;June: Troubles and Fixes&lt;/h2&gt;
&lt;p&gt;In June, I upgraded to clear rolling containers, drilling holes and attaching plastic cups to create makeshift net pots. While this setup was budget-friendly, it came with its own set of problems. The sunlight heating up the water reservoir caused bacterial growth, which negatively impacted my plants.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image.png&quot; alt=&quot;Hydroponic System Setup&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;July-August: The Big Upgrade&lt;/h2&gt;
&lt;p&gt;With a budget of AUD 100, I decided to build a more sophisticated system using PVC pipes from Bunnings. This upgrade allowed for better space management and a larger growing area. I could now support more plants and create a more stable environment for them. These are the pictures that I took today. As of date, I&apos;ve been eating some healthy leaves by trimming a leaf from each of them here and there.&lt;/p&gt;
&lt;h2&gt;&lt;img src=&quot;level1.png&quot; alt=&quot;alt text&quot; /&gt;
&lt;img src=&quot;level2.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What I’ve Learned:&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Step 1: Gather Your Materials&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Essential Equipment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hydroponic Planters:&lt;/strong&gt; Start with basic hydroponic planters or containers. You can experiment with different types to see what works best for you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Growing Medium:&lt;/strong&gt; Choose an inert growing medium such as coir peat, rock wool, or hydroton clay pellets. I initially used fish pebbles, but coir peat or hydroton clay pellets are better alternatives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Water Pump:&lt;/strong&gt; A water pump helps circulate the nutrient solution, preventing stagnation and bacterial growth.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nutrient Solution:&lt;/strong&gt; Hydroponic plants require a special nutrient solution. Mix it according to the manufacturer&apos;s instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pH and EC Meters:&lt;/strong&gt; These tools help monitor the pH and electrical conductivity (EC) of your nutrient solution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plastic Containers:&lt;/strong&gt; Clear rolling containers or larger bins are useful for holding your nutrient solution and growing medium.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 2: Setting Up Your Initial System&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assemble Your Planters:&lt;/strong&gt; Set up your hydro planters. Modify inexpensive containers if needed. For example, I used clear rolling containers, drilled holes, and attached plastic cups as netted pots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prepare the Growing Medium:&lt;/strong&gt; Fill the planters with your chosen growing medium. Ensure it is well-drained and supports plant roots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install the Water Pump:&lt;/strong&gt; Place the pump in the nutrient reservoir, making sure it effectively circulates the water and nutrient solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mix the Nutrient Solution:&lt;/strong&gt; Follow the instructions on your nutrient solution package. Use pH and EC meters to ensure the solution is within the ideal ranges.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set Up the Reservoir:&lt;/strong&gt; Place your nutrient solution in a large container or reservoir. If using clear containers, cover them to reduce light exposure and prevent algae growth.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 3: Monitor and Maintain&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check Water Temperature:&lt;/strong&gt; Regularly check the temperature of your nutrient solution. Excessive heat can cause bacterial growth, so keep the reservoir in a cool, shaded area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Adjust pH and EC:&lt;/strong&gt; Use your meters to monitor and adjust the pH and EC levels of the nutrient solution to ensure optimal plant growth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replace the Nutrient Solution:&lt;/strong&gt; Replace the nutrient solution every few weeks or as needed based on the health of your plants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prevent Algae Growth:&lt;/strong&gt; Cover the nutrient reservoir with a lid or opaque material to block out light and prevent algae problems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Step 4: Expand and Improve&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upgrade Your System:&lt;/strong&gt; With a budget of AUD 100, I transitioned to a larger system using PVC pipes from Bunnings. This allowed for more plants and better space management. You might also consider other hydroponic systems like Deep Water Culture (DWC) or Nutrient Film Technique (NFT) as you gain experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Learn and Adapt:&lt;/strong&gt; Experiment with different growing mediums, nutrient solutions, and plant varieties to optimize your hydroponic garden.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Invest in Better Equipment:&lt;/strong&gt; As your budget allows, consider investing in high-quality pumps, grow lights, and advanced pH/EC meters to enhance your system&apos;s efficiency and plant health.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Starting a hydroponic system requires careful planning and adjustment. With the right setup, you can create a successful indoor garden. Begin with basic equipment, monitor your system regularly, and be prepared to make improvements as you learn more about hydroponic gardening. Happy growing!&lt;/p&gt;
</content:encoded></item><item><title>BIM in Revit</title><link>https://fuwari.vercel.app/posts/revit/bim-in-revit/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/revit/bim-in-revit/</guid><description>Posted by Rashida Rudino</description><pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In 2023, during my undergraduate studies at UNSW, I had the opportunity to dive deeply into Building Information Modeling (BIM) through the architecture course CODE2170. This course was all about mastering Revit, a key tool in architectural design. My role involved creating detailed 3D renderings, floor plans, elevations, sections, and area schedules for various types of buildings, including residential homes, housing complexes, and community centers.&lt;/p&gt;
&lt;p&gt;A major part of my work was developing 3D renderings in Revit. I set up camera views, applied materials, and adjusted lighting to produce realistic visualizations of our designs. This helped in presenting our ideas clearly and effectively. I also focused on creating comprehensive documentation, including floor plans where I precisely placed walls, doors, and windows; elevations showing the exterior of the buildings; and sections providing vertical cuts through the structure to highlight interior details.
&lt;img src=&quot;column-rotation.gif&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Another important aspect was managing area schedules. Using Revit’s tools, I calculated floor areas, room volumes, and other metrics to ensure our designs met spatial requirements and building codes. This meticulous documentation was essential for both design accuracy and compliance.
&lt;img src=&quot;front-ext.png&quot; alt=&quot;alt text&quot; /&gt;
Working with a group of international university students added a unique dimension to the project. We used Revit’s collaborative features, such as worksharing, to manage simultaneous modifications and integrate everyone’s work seamlessly. This experience required careful coordination to avoid conflicts and maintain consistency throughout our project.
&lt;img src=&quot;front-escape.png&quot; alt=&quot;alt text&quot; /&gt;
This project not only advanced my Revit skills—such as mastering the Family Editor for creating custom components and using the Annotation Tool for detailed notes—but also provided valuable experience in handling complex BIM projects. I learned how to leverage Revit’s features for precise modeling and how to collaborate effectively within a diverse group of peers.&lt;/p&gt;
&lt;p&gt;Overall, CODE2170 was an incredible chance to develop my technical skills in Revit and tackle real-world architectural challenges.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;multistorey.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
</content:encoded></item><item><title>Simple Figma Design Tutorial for a Web App</title><link>https://fuwari.vercel.app/posts/ui/simple-figma-design/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/ui/simple-figma-design/</guid><pubDate>Fri, 23 Aug 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Welcome to your quick guide on getting started with designing a web app in Figma! Whether you&apos;re new to design or just need a refresher, this guide will walk you through creating a minimalistic and functional web app design. Let’s dive in!&lt;/p&gt;
&lt;h2&gt;1. Start Your Project 🚀&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a New File:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open Figma and hit &quot;New File&quot; to start your fresh canvas. Think of this as your blank page, ready for creativity!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add Frames for Screens:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the Frame Tool (&lt;code&gt;F&lt;/code&gt;) and create frames for each part of your app. For a basic setup, you&apos;ll need frames for screens like Home, Dashboard, and Login. Frames are your app’s building blocks!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. Design the Main Pages ✏️&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Home Page:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header:&lt;/strong&gt; Draw a rectangle at the top for your header. Add your logo and navigation links using the Text Tool (&lt;code&gt;T&lt;/code&gt;). This is where your users will first land, so make it welcoming and informative!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Content:&lt;/strong&gt; Below the header, add sections for key features or content. Think of this as the heart of your homepage, where you’ll showcase what your app is all about.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dashboard Page:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sidebar:&lt;/strong&gt; Create a vertical rectangle on the left for your sidebar. Fill it with links or icons to help users navigate your app’s features.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Main Area:&lt;/strong&gt; On the right, set up a larger rectangle for displaying dashboards, charts, or data. This is where the magic happens, so make it clear and engaging!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Login Page:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Form:&lt;/strong&gt; Use rectangles for input fields (username, password) and labels. This page needs to be straightforward, so users can log in without a hitch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Button:&lt;/strong&gt; Draw a rectangle for the &quot;Login&quot; button. Style it to stand out and be easily clickable. A great button makes for a great user experience!
&lt;img src=&quot;Super_Tool_Collage.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;3. Use Components and Styles ✨&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Components:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Buttons:&lt;/strong&gt; Design a button and turn it into a Component (&lt;code&gt;Cmd/Ctrl + Option/Alt + K&lt;/code&gt;). This way, you can reuse the same button style throughout your app.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Navigation Bar:&lt;/strong&gt; Create a reusable navigation bar component. This keeps your design consistent and saves you time!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Apply Styles:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Colors:&lt;/strong&gt; Set up color styles to keep your design cohesive. Apply these colors to your elements to maintain a unified look.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Text Styles:&lt;/strong&gt; Define text styles for headings, subheadings, and body text. Consistent typography helps keep everything looking sharp and organized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;4. Set Up Basic Interactions 🔗&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add Links:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to the Prototype tab and connect elements (like buttons) to different frames. This helps illustrate how users will navigate through your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Preview Your Design:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the Play button in the top-right to see your design in action. It’s like a mini-demo of your app—check how everything flows and make sure it looks great!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;5. Share and Get Feedback 💬&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Share Your Work:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hit &quot;Share&quot; in the top-right to get a link or invite others to view or edit your design. Share it with your team or stakeholders to get their insights!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gather Feedback:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Review comments and feedback from others. Use this valuable input to refine and improve your design.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Example Pages to Create 📄&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Home Page:&lt;/strong&gt; Header, Main Content, Footer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dashboard:&lt;/strong&gt; Sidebar, Main Content Area&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Login Page:&lt;/strong&gt; Form Fields, Login Button&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Design Advice 💡&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keep It Simple:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Less is more! A clean and straightforward design helps users focus on what matters most. Avoid clutter and keep things easy to navigate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency is Key:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistent colors, fonts, and styles make your app feel cohesive and professional. It also helps users know what to expect as they move through your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prioritize Usability:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure your app is easy to use. Important actions should be easy to find and perform. A smooth user experience is a happy user experience!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Visual Hierarchy:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrange elements to guide users&apos; attention to the most important parts first. Use size, color, and placement to highlight key features.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Responsive Design:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think about how your design will look on different screen sizes. Use Figma’s features to create a flexible design that works well on all devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Test and Iterate:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test your design with real users or team members. Their feedback is gold! Make changes based on their input to improve your design.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure your design is accessible to all users. Use high contrast for readability and make interactive elements easy to navigate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tips 🌟&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto Layout:&lt;/strong&gt; Helps keep your design flexible and responsive. Great for creating designs that adapt to various screen sizes!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Components:&lt;/strong&gt; Use them for repeating elements like buttons or headers. This saves time and keeps your design consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it! You’re all set to design a fantastic web app in Figma. Have fun with your design process and happy creating!&lt;/p&gt;
</content:encoded></item><item><title>Markdown Extended Features</title><link>https://fuwari.vercel.app/posts/markdown-extended/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/markdown-extended/</guid><description>Read more about Markdown features in Fuwari</description><pubDate>Wed, 01 May 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;GitHub repository cards&lt;/h2&gt;
&lt;p&gt;You can add dynamic cards that link to GitHub repositories, on page load, the repository information is pulled from the GitHub API.&lt;/p&gt;
&lt;p&gt;::github{repo=&quot;Fabrizz/MMM-OnSpotify&quot;}&lt;/p&gt;
&lt;p&gt;Create a GitHub repository card with the code &lt;code&gt;::github{repo=&quot;&amp;lt;owner&amp;gt;/&amp;lt;repo&amp;gt;&quot;}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::github{repo=&quot;saicaca/fuwari&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Admonitions&lt;/h2&gt;
&lt;p&gt;Following types of admonitions are supported: &lt;code&gt;note&lt;/code&gt; &lt;code&gt;tip&lt;/code&gt; &lt;code&gt;important&lt;/code&gt; &lt;code&gt;warning&lt;/code&gt; &lt;code&gt;caution&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;:::note
Highlights information that users should take into account, even when skimming.
:::&lt;/p&gt;
&lt;p&gt;:::tip
Optional information to help a user be more successful.
:::&lt;/p&gt;
&lt;p&gt;:::important
Crucial information necessary for users to succeed.
:::&lt;/p&gt;
&lt;p&gt;:::warning
Critical content demanding immediate user attention due to potential risks.
:::&lt;/p&gt;
&lt;p&gt;:::caution
Negative potential consequences of an action.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note
Highlights information that users should take into account, even when skimming.
:::

:::tip
Optional information to help a user be more successful.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The title of the admonition can be customized.&lt;/p&gt;
&lt;p&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::note[MY CUSTOM TITLE]
This is a note with a custom title.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
&lt;a href=&quot;https://github.com/orgs/community/discussions/16925&quot;&gt;The GitHub syntax&lt;/a&gt; is also supported.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; [!NOTE]
&amp;gt; The GitHub syntax is also supported.

&amp;gt; [!TIP]
&amp;gt; The GitHub syntax is also supported.
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Simple Guides for Fuwari</title><link>https://fuwari.vercel.app/posts/guide/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/guide/</guid><description>How to use this blog template.</description><pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Cover image source: &lt;a href=&quot;https://image.civitai.com/xG1nkqKTMzGDvpLrqFT7WA/208fc754-890d-4adb-9753-2c963332675d/width=2048/01651-1456859105-(colour_1.5),girl,_Blue,yellow,green,cyan,purple,red,pink,_best,8k,UHD,masterpiece,male%20focus,%201boy,gloves,%20ponytail,%20long%20hair,.jpeg&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This blog template is built with &lt;a href=&quot;https://astro.build/&quot;&gt;Astro&lt;/a&gt;. For the things that are not mentioned in this guide, you may find the answers in the &lt;a href=&quot;https://docs.astro.build/&quot;&gt;Astro Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Front-matter of Posts&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;---
title: My First Blog Post
published: 2023-09-09
description: This is the first post of my new Astro blog.
image: ./cover.jpg
tags: [Foo, Bar]
category: Front-end
draft: false
---
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The title of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The date the post was published.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A short description of the post. Displayed on index page.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The cover image path of the post.&amp;lt;br/&amp;gt;1. Start with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;: Use web image&amp;lt;br/&amp;gt;2. Start with &lt;code&gt;/&lt;/code&gt;: For image in &lt;code&gt;public&lt;/code&gt; dir&amp;lt;br/&amp;gt;3. With none of the prefixes: Relative to the markdown file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The tags of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;category&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The category of the post.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;draft&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;If this post is still a draft, which won&apos;t be displayed.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Where to Place the Post Files&lt;/h2&gt;
&lt;p&gt;Your post files should be placed in &lt;code&gt;src/content/posts/&lt;/code&gt; directory. You can also create sub-directories to better organize your posts and assets.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;src/content/posts/
├── post-1.md
└── post-2/
    ├── cover.png
    └── index.md
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Markdown Example</title><link>https://fuwari.vercel.app/posts/markdown/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/markdown/</guid><description>A simple example of a Markdown blog post.</description><pubDate>Sun, 01 Oct 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;An h1 header&lt;/h1&gt;
&lt;p&gt;Paragraphs are separated by a blank line.&lt;/p&gt;
&lt;p&gt;2nd paragraph. &lt;em&gt;Italic&lt;/em&gt;, &lt;strong&gt;bold&lt;/strong&gt;, and &lt;code&gt;monospace&lt;/code&gt;. Itemized lists
look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this one&lt;/li&gt;
&lt;li&gt;that one&lt;/li&gt;
&lt;li&gt;the other one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that --- not considering the asterisk --- the actual text
content starts at 4-columns in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;
&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &quot;it&apos;s all
in chapters 12--14&quot;). Three dots ... will be converted to an ellipsis.
Unicode is supported. ☺&lt;/p&gt;
&lt;h2&gt;An h2 header&lt;/h2&gt;
&lt;p&gt;Here&apos;s a numbered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;first item&lt;/li&gt;
&lt;li&gt;second item&lt;/li&gt;
&lt;li&gt;third item&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note again how the actual text starts at 4 columns in (4 characters
from the left side). Here&apos;s a code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Let me re-iterate ...
for i in 1 .. 10 { do-something(i) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you probably guessed, indented 4 spaces. By the way, instead of
indenting the block, you can use delimited blocks, if you like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(which makes copying &amp;amp; pasting easier). You can optionally mark the
delimited block for Pandoc to syntax highlight it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
# Quick, count to ten!
for i in range(10):
    # (but not *too* quick)
    time.sleep(0.5)
    print i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;An h3 header&lt;/h3&gt;
&lt;p&gt;Now a nested list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, get these ingredients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carrots&lt;/li&gt;
&lt;li&gt;celery&lt;/li&gt;
&lt;li&gt;lentils&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boil some water.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump everything in the pot and follow
this algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; find wooden spoon
 uncover pot
 stir
 cover pot
 balance wooden spoon precariously on pot handle
 wait 10 minutes
 goto first step (or shut off burner when done)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not bump wooden spoon or it will fall.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice again how text always lines up on 4-space indents (including
that last line which continues item 3 above).&lt;/p&gt;
&lt;p&gt;Here&apos;s a link to &lt;a href=&quot;http://foo.bar&quot;&gt;a website&lt;/a&gt;, to a &lt;a href=&quot;local-doc.html&quot;&gt;local
doc&lt;/a&gt;, and to a &lt;a href=&quot;#an-h2-header&quot;&gt;section heading in the current
doc&lt;/a&gt;. Here&apos;s a footnote [^1].&lt;/p&gt;
&lt;p&gt;[^1]: Footnote text goes here.&lt;/p&gt;
&lt;p&gt;Tables can look like this:&lt;/p&gt;
&lt;p&gt;size material color&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;9 leather brown
10 hemp canvas natural
11 glass transparent&lt;/p&gt;
&lt;p&gt;Table: Shoes, their sizes, and what they&apos;re made of&lt;/p&gt;
&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;keyword text&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;red Sunsets, apples, and
other red or reddish
things.&lt;/p&gt;
&lt;p&gt;green Leaves, grass, frogs
and other things it&apos;s
not easy being.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A horizontal rule follows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here&apos;s a definition list:&lt;/p&gt;
&lt;p&gt;apples
: Good for making applesauce.
oranges
: Citrus!
tomatoes
: There&apos;s no &quot;e&quot; in tomatoe.&lt;/p&gt;
&lt;p&gt;Again, text is indented 4 spaces. (Put a blank line between each
term/definition pair to spread things out more.)&lt;/p&gt;
&lt;p&gt;Here&apos;s a &quot;line block&quot;:&lt;/p&gt;
&lt;p&gt;| Line one
| Line too
| Line tree&lt;/p&gt;
&lt;p&gt;and images can be specified like so:&lt;/p&gt;
&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;
&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;
&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;
</content:encoded></item><item><title>Include Video in the Posts</title><link>https://fuwari.vercel.app/posts/video/</link><guid isPermaLink="true">https://fuwari.vercel.app/posts/video/</guid><description>This post demonstrates how to include embedded video in a blog post.</description><pubDate>Tue, 01 Aug 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Just copy the embed code from YouTube or other platforms, and paste it in the markdown file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: Include Video in the Post
published: 2023-10-19
// ...
---

&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;YouTube&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;https://www.youtube.com/embed/5gIf0_xpFPI?si=N1WTorLKL0uwLsU_&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;h2&gt;Bilibili&lt;/h2&gt;
&lt;p&gt;&amp;lt;iframe width=&quot;100%&quot; height=&quot;468&quot; src=&quot;//player.bilibili.com/player.html?bvid=BV1fK4y1s7Qf&amp;amp;p=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content:encoded></item></channel></rss>